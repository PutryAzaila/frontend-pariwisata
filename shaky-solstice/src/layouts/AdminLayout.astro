---
// src/layouts/AdminLayout.astro
import Layout from '../layouts/Layout.astro';
import Sidebar from '../components/Sidebar.astro';
import Header from '../components/Header.astro';
import '../styles/global.css';

export interface Props {
  title?: string;
  subtitle?: string;
  pageTitle?: string;
  showBreadcrumb?: boolean;
}

const { 
  title = "Dashboard",
  subtitle,
  pageTitle = "Admin Dashboard - Pariwisata",
  showBreadcrumb = false
} = Astro.props;
const csrfToken = "YOUR_CSRF_TOKEN_HERE"; // Ganti dengan cara generate token yang sesuai

---

<Layout title={pageTitle}>
  <Fragment slot="head">
    <meta name="csrf-token" content={csrfToken}>
  </Fragment>
  <!-- Auth Check Loading Screen -->
  <div id="authCheckLoading" class="fixed inset-0 bg-white dark:bg-gray-900 z-50 flex items-center justify-center">
    <div class="text-center">
      <div class="w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
      <p class="text-gray-600 dark:text-gray-400">Memverifikasi akses...</p>
    </div>
  </div>

  <!-- Main Content -->
  <div id="mainContent" class="min-h-screen bg-gray-50 dark:bg-gray-900 hidden">
    <Sidebar />
    <div class="lg:ml-64">
      <Header 
        title={title} 
        subtitle={subtitle} 
        showBreadcrumb={showBreadcrumb} 
      />
      <main class="p-4 sm:p-6 lg:p-8">
        <slot />
      </main>
    </div>
  </div>

  <!-- Logout Confirmation Modal -->
  <div id="logoutModal" class="fixed inset-0 flex items-center justify-center hidden z-50 backdrop-blur-sm bg-black/20">
    <div class="bg-white dark:bg-gray-800 rounded-xl p-6 w-80 shadow-xl border border-gray-200 dark:border-gray-700 transform transition-all duration-300 scale-95">
      <div class="flex items-center mb-4">
        <div class="w-12 h-12 bg-red-100 dark:bg-red-900/30 rounded-full flex items-center justify-center mr-3">
          <i class="fas fa-sign-out-alt text-red-600 dark:text-red-400"></i>
        </div>
        <h2 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Konfirmasi Logout</h2>
      </div>
      <p class="mb-6 text-gray-600 dark:text-gray-300">Apakah Anda yakin ingin keluar dari sistem?</p>
      <div class="flex justify-end gap-3">
        <button onclick="closeLogoutModal()" class="px-4 py-2 rounded-lg bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-100 hover:bg-gray-300 dark:hover:bg-gray-600 transition-all duration-200">
          Batal
        </button>
        <button id="logoutConfirmBtn" class="px-4 py-2 rounded-lg text-white bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 transition-all duration-200 flex items-center">
          <i class="fas fa-sign-out-alt mr-2"></i>
          Logout
        </button>
      </div>
    </div>
  </div>

  <!-- Global Toast Notification -->
  <div id="globalToast" class="fixed bottom-4 right-4 px-6 py-3 rounded-lg shadow-lg transform translate-x-full transition-transform duration-300 z-50">
    <div class="flex items-center">
      <i id="globalToastIcon" class="mr-2"></i>
      <span id="globalToastMessage"></span>
    </div>
  </div>

  <!-- Global Loading Spinner -->
  <div id="globalLoadingSpinner" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg">
      <div class="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-2"></div>
      <p class="text-gray-600 dark:text-gray-400 text-sm">Loading...</p>
    </div>
  </div>
</Layout>

<script>
  // Global admin utilities
  declare global {
    interface Window {
      AdminUtils: {
        showToast: (message: string, type?: 'success' | 'error' | 'info') => void;
        showLoading: () => void;
        hideLoading: () => void;
        api: {
          request: (endpoint: string, options?: RequestInit) => Promise<any>;
        };
        form: {
          serialize: (form: HTMLFormElement) => Record<string, any>;
          validate: {
            email: (email: string) => boolean;
            phone: (phone: string) => boolean;
            strongPassword: (password: string) => boolean;
          };
        };
        storage: {
          set: (key: string, value: any) => void;
          get: (key: string) => any;
          remove: (key: string) => void;
        };
        auth: {
          checkAuth: () => boolean;
          logout: () => void;
          getUserData: () => any;
        };
      };
      showLogoutModal: () => void;
      closeLogoutModal: () => void;
      proceedLogout: () => void;
    }
  }

  // Initialize global utilities
  window.AdminUtils = {
    // Toast notification system
    showToast: (message: string, type: 'success' | 'error' | 'info' = 'success') => {
      const toast = document.getElementById('globalToast');
      const toastMessage = document.getElementById('globalToastMessage');
      const toastIcon = document.getElementById('globalToastIcon');
      
      if (!toast || !toastMessage || !toastIcon) {
        console.warn('Global toast elements not found');
        return;
      }
      
      // Reset classes
      toast.className = 'fixed bottom-4 right-4 px-6 py-3 rounded-lg shadow-lg transform transition-transform duration-300 z-50';
      
      // Set icon and style based on type
      switch (type) {
        case 'success':
          toast.classList.add('bg-green-500', 'text-white', 'border', 'border-green-600');
          toastIcon.className = 'fas fa-check-circle mr-2';
          break;
        case 'error':
          toast.classList.add('bg-red-500', 'text-white', 'border', 'border-red-600');
          toastIcon.className = 'fas fa-exclamation-circle mr-2';
          break;
        case 'info':
          toast.classList.add('bg-blue-500', 'text-white', 'border', 'border-blue-600');
          toastIcon.className = 'fas fa-info-circle mr-2';
          break;
      }
      
      toastMessage.textContent = message;
      toast.classList.remove('translate-x-full');
      
      setTimeout(() => {
        toast.classList.add('translate-x-full');
      }, 3000);
    },

    // Loading spinner
    showLoading: () => {
      const spinner = document.getElementById('globalLoadingSpinner');
      if (spinner) spinner.classList.remove('hidden');
    },

    hideLoading: () => {
      const spinner = document.getElementById('globalLoadingSpinner');
      if (spinner) spinner.classList.add('hidden');
    },

    // API utilities
    api: {
      async request(endpoint: string, options: RequestInit = {}) {
        const baseURL = 'https://pengmas.hipmi-tup.com';
        const url = `${baseURL}${endpoint}`;
        
        // Get auth token
        const token = localStorage.getItem('access_token');
        const tokenType = localStorage.getItem('token_type') || 'Bearer';
        
        const defaultOptions: RequestInit = {
          headers: {
            'Content-Type': 'application/json',
            ...(token && { 'Authorization': `${tokenType} ${token}` }),
            ...options.headers,
          },
        };
        
        try {
          const response = await fetch(url, { ...defaultOptions, ...options });
          
          // If unauthorized, logout
          if (response.status === 401) {
            window.AdminUtils.auth.logout();
            return;
          }
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          return await response.json();
        } catch (error) {
          console.error('API request failed:', error);
          throw error;
        }
      }
    },

    // Form utilities
    form: {
      serialize(form: HTMLFormElement): Record<string, any> {
        const formData = new FormData(form);
        const data: Record<string, any> = {};
        
        for (const [key, value] of formData.entries()) {
          if (data[key]) {
            if (Array.isArray(data[key])) {
              data[key].push(value);
            } else {
              data[key] = [data[key], value];
            }
          } else {
            data[key] = value;
          }
        }
        
        return data;
      },
      
      validate: {
        email(email: string): boolean {
          const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          return regex.test(email);
        },
        
        phone(phone: string): boolean {
          const regex = /^(\+62|0)[0-9]{9,12}$/;
          return regex.test(phone.replace(/\s/g, ''));
        },
        
        strongPassword(password: string): boolean {
          const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
          return regex.test(password);
        }
      }
    },

    // Storage utilities
    storage: {
      set(key: string, value: any): void {
        try {
          localStorage.setItem(key, JSON.stringify(value));
        } catch (error) {
          console.warn('Failed to save to localStorage:', error);
        }
      },
      
      get(key: string): any {
        try {
          const item = localStorage.getItem(key);
          return item ? JSON.parse(item) : null;
        } catch (error) {
          console.warn('Failed to get from localStorage:', error);
          return null;
        }
      },
      
      remove(key: string): void {
        try {
          localStorage.removeItem(key);
        } catch (error) {
          console.warn('Failed to remove from localStorage:', error);
        }
      }
    },

    // Auth utilities
    auth: {
      checkAuth(): boolean {
        const token = localStorage.getItem('access_token');
        const userData = localStorage.getItem('user_data');
        
        return !!(token && userData);
      },

      logout(): void {
        // Clear all auth data
        localStorage.removeItem('access_token');
        localStorage.removeItem('token_type');
        localStorage.removeItem('user_data');
        localStorage.removeItem('remember_login');
        localStorage.removeItem('login_time');
        localStorage.removeItem('user_role');
        
        // Show logout message
        window.AdminUtils.showToast('Anda telah logout', 'info');
        
        // Redirect to login after short delay
        setTimeout(() => {
          window.location.href = '/login';
        }, 1000);
      },

      getUserData(): any {
        try {
          const userData = localStorage.getItem('user_data');
          return userData ? JSON.parse(userData) : null;
        } catch (error) {
          console.error('Error getting user data:', error);
          return null;
        }
      }
    }
  };

  // Logout Modal Functions
  function showLogoutModal() {
    const modal = document.getElementById("logoutModal");
    if (modal) {
      modal.classList.remove("hidden");
      // Add scale animation
      const modalContent = modal.querySelector('.transform');
      if (modalContent) {
        setTimeout(() => {
          modalContent.classList.remove('scale-95');
          modalContent.classList.add('scale-100');
        }, 10);
      }
    }
  }

  function closeLogoutModal() {
    const modal = document.getElementById("logoutModal");
    if (modal) {
      const modalContent = modal.querySelector('.transform');
      if (modalContent) {
        modalContent.classList.remove('scale-100');
        modalContent.classList.add('scale-95');
      }
      setTimeout(() => {
        modal.classList.add("hidden");
      }, 150);
    }
  }

  function proceedLogout() {
    closeLogoutModal();
    window.AdminUtils.auth.logout();
  }

  // Export global functions
  window.showLogoutModal = showLogoutModal;
  window.closeLogoutModal = closeLogoutModal;
  window.proceedLogout = proceedLogout;

  // Auth check on page load
  function checkAuthOnLoad() {
    const authCheckLoading = document.getElementById('authCheckLoading');
    const mainContent = document.getElementById('mainContent');
    
    // Simulate auth check delay
    setTimeout(() => {
      if (window.AdminUtils.auth.checkAuth()) {
        // User is authenticated, show main content
        if (authCheckLoading) authCheckLoading.style.display = 'none';
        if (mainContent) mainContent.classList.remove('hidden');
        
        // Show welcome message
        const userData = window.AdminUtils.auth.getUserData();
        if (userData && userData.name) {
          window.AdminUtils.showToast(`Selamat datang, ${userData.name}!`, 'success');
        }
      } else {
        // User not authenticated, redirect to login
        window.AdminUtils.showToast('Sesi telah berakhir, silakan login kembali', 'error');
        setTimeout(() => {
          window.location.href = '/login';
        }, 1500);
      }
    }, 800); // Small delay for better UX
  }

  // Initialize on DOMContentLoaded
  document.addEventListener('DOMContentLoaded', () => {
    // Check authentication first
    checkAuthOnLoad();
    
    // Initialize dark mode
    const savedTheme = window.AdminUtils.storage.get('tourism-admin-dark-mode');
    if (savedTheme?.enabled) {
      document.documentElement.classList.add('dark');
    }

    // Setup logout button event
    const logoutBtn = document.getElementById("logoutConfirmBtn");
    if (logoutBtn) {
      logoutBtn.addEventListener("click", proceedLogout);
    }
  });

  // Global keyboard shortcuts
  document.addEventListener('keydown', (e) => {
    // Ctrl/Cmd + K for search
    if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
      e.preventDefault();
      const searchInput = document.getElementById('globalSearch');
      if (searchInput) {
        (searchInput as HTMLInputElement).focus();
      }
    }
    
    // ESC to close modals/overlays
    if (e.key === 'Escape') {
      // Close logout modal
      closeLogoutModal();
      
      // Close any other modals
      const modals = document.querySelectorAll('[data-modal-open="true"]');
      modals.forEach(modal => {
        (modal as HTMLElement).style.display = 'none';
        modal.setAttribute('data-modal-open', 'false');
      });
      
      // Close mobile sidebar if open
      const sidebar = document.getElementById('sidebar');
      if (sidebar && !sidebar.classList.contains('-translate-x-full')) {
        sidebar.classList.add('-translate-x-full');
      }
    }
  });

  // Session timeout check (optional)
  function checkSessionTimeout() {
    const loginTime = localStorage.getItem('login_time');
    if (loginTime) {
      const loginDate = new Date(loginTime);
      const now = new Date();
      const timeDiff = now.getTime() - loginDate.getTime();
      const hoursDiff = timeDiff / (1000 * 60 * 60);
      
      // If more than 24 hours, auto logout
      if (hoursDiff > 24) {
        window.AdminUtils.showToast('Sesi telah berakhir, silakan login kembali', 'info');
        setTimeout(() => {
          window.AdminUtils.auth.logout();
        }, 2000);
      }
    }
  }

  // Check session every 30 minutes
  if (typeof window !== 'undefined') {
    setInterval(checkSessionTimeout, 30 * 60 * 1000);
  }

  // Handle network errors globally
  if (typeof window !== 'undefined') {
    window.addEventListener('online', () => {
      window.AdminUtils.showToast('Koneksi internet tersambung kembali', 'success');
    });

    window.addEventListener('offline', () => {
      window.AdminUtils.showToast('Koneksi internet terputus', 'error');
    });
  }
</script>