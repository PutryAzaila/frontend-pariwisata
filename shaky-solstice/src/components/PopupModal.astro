---
export interface Props {
  id: string;
  title?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl';
  showCloseButton?: boolean;
}

const {
  id,
  title = 'Modal',
  size = 'md',
  showCloseButton = true
} = Astro.props;

const sizeClasses = {
  sm: 'max-w-sm',
  md: 'max-w-md',
  lg: 'max-w-lg', 
  xl: 'max-w-xl'
};
---

<div id={id} class="fixed inset-0 z-50 hidden overflow-y-auto bg-black bg-opacity-50 popup-modal">
  <div class="flex min-h-screen items-center justify-center p-4">
    <div class={`card ${sizeClasses[size]} w-full relative`}>
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200">
          {title}
        </h3>
        {showCloseButton && (
          <button onclick={`hidePopup('${id}')`} class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        )}
      </div>
      
      <div class="popup-content">
        <slot />
      </div>
    </div>
  </div>
</div>

<script is:inline>
  // Global popup functions
  window.showPopup = function(popupId) {
    const popup = document.getElementById(popupId);
    if (popup) {
      popup.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      
      // Focus trap
      const focusableElements = popup.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
      if (focusableElements.length > 0) {
        focusableElements[0].focus();
      }
    }
  };

  window.hidePopup = function(popupId) {
    const popup = document.getElementById(popupId);
    if (popup) {
      popup.classList.add('hidden');
      document.body.style.overflow = '';
    }
  };

  // Close popup when clicking outside
  document.addEventListener('click', function(event) {
    const popups = document.querySelectorAll('.popup-modal');
    popups.forEach(popup => {
      if (!popup.classList.contains('hidden')) {
        const content = popup.querySelector('.card');
        if (content && !content.contains(event.target)) {
          hidePopup(popup.id);
        }
      }
    });
  });

  // Close popup with Escape key
  document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
      const visiblePopups = document.querySelectorAll('.popup-modal:not(.hidden)');
      visiblePopups.forEach(popup => {
        hidePopup(popup.id);
      });
    }
  });

  // Notification system
  window.showNotification = function(message, type = 'info') {
    // Remove existing notifications
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notif => notif.remove());

    const notification = document.createElement('div');
    notification.className = `notification fixed top-4 right-4 z-[9999] px-4 py-3 rounded-lg shadow-lg text-white transition-all duration-300 transform translate-x-full`;
    
    const colors = {
      success: 'bg-green-600',
      error: 'bg-red-600',
      warning: 'bg-yellow-600',
      info: 'bg-blue-600'
    };
    
    notification.classList.add(colors[type] || colors.info);
    notification.innerHTML = `
      <div class="flex items-center gap-2">
        <span>${message}</span>
        <button onclick="this.parentElement.parentElement.remove()" class="ml-2 text-white hover:text-gray-200">
          <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
      notification.classList.remove('translate-x-full');
    }, 100);
    
    // Auto hide after 4 seconds
    setTimeout(() => {
      notification.classList.add('translate-x-full');
      setTimeout(() => {
        if (notification.parentNode) {
          notification.remove();
        }
      }, 300);
    }, 4000);
  };
</script>