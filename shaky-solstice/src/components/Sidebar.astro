---
const currentPath = Astro.url.pathname;
import '../styles/global.css';
---

<!-- Font Awesome CDN for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />

<aside class="w-64 bg-white dark:bg-gray-800 h-screen fixed left-0 top-0 shadow-lg border-r border-gray-200 dark:border-gray-700 z-40 transform -translate-x-full lg:translate-x-0 transition-all duration-300 ease-in-out flex flex-col" id="sidebar">
  <!-- Logo/Header -->
  <div class="p-6 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
    <div class="flex items-center gap-3">
      <div class="w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
        </svg>
      </div>
      <div>
        <h1 class="text-lg font-bold text-gray-900 dark:text-white">Admin Panel</h1>
        <p class="text-sm text-gray-500 dark:text-gray-400" id="user-role-display">Pariwisata</p>
      </div>
    </div>
  </div>

  <!-- Navigation - Scrollable Area -->
  <nav class="flex-1 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent hover:scrollbar-thumb-gray-400 dark:hover:scrollbar-thumb-gray-500" id="sidebar-nav">
    <div class="p-4 space-y-2">
      <!-- Dashboard (Static) -->
      <a href="/" class="sidebar-item flex items-center gap-3 px-4 py-3 rounded-xl text-blue-700 dark:text-blue-300 hover:bg-blue-100 dark:hover:bg-blue-700 transition-all duration-200 group" data-active-class="bg-blue-600 text-white shadow-lg">
        <i class="fas fa-chart-line w-5 h-5"></i>
        <span>Dashboard</span>
      </a>

      <!-- Loading Spinner -->
      <div id="sidebar-loader" class="flex items-center justify-center py-8">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>

      <!-- Dynamic Menu Items -->
      <div id="dynamic-menu" class="hidden">
        <!-- Menu items akan dirender di sini berdasarkan permissions -->
      </div>

      <!-- Error State -->
      <div id="sidebar-error" class="hidden p-4 text-center">
        <div class="text-red-500 dark:text-red-400 mb-2">
          <i class="fas fa-exclamation-triangle text-2xl mb-2"></i>
          <p class="text-sm">Gagal memuat menu</p>
          <button onclick="loadSidebarData()" class="mt-2 px-3 py-1 text-xs bg-red-100 text-red-600 rounded-md hover:bg-red-200">
            <i class="fas fa-redo-alt mr-1"></i>
            Coba Lagi
          </button>
        </div>
      </div>
    </div>
  </nav>

  <!-- User Info - Fixed at bottom -->
  <div class="flex-shrink-0 p-4 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800">
    <div class="flex items-center gap-3 mb-3">
      <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center shadow-lg" id="user-avatar">
        <span class="text-white text-sm font-medium">A</span>
      </div>
      <div class="flex-1">
        <p class="text-sm font-medium text-gray-900 dark:text-white" id="user-name-display">Admin</p>
        <p class="text-xs text-gray-500 dark:text-gray-400" id="user-role-bottom">Administrator</p>
      </div>
    </div>
  </div>
</aside>

<!-- Mobile overlay -->
<div class="fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden hidden transition-opacity duration-300" id="sidebar-overlay"></div>

<script>
  // Enhanced Types
  interface User {
    id?: number;
    name?: string;
    email?: string;
    role?: string;
    permissions?: string[];
  }

  interface MenuItem {
    id?: number;
    name: string;
    slug: string;
    is_spacer?: boolean;
    is_datatable?: boolean;
    order: number;
    badge?: string;
    meta?: {
      route?: string;
      icon?: string;
      permissions?: string[];
    };
    roles?: string[];
  }

  const currentPath = window.location.pathname;

  function getCurrentUser(): User | null {
    try {
      const userData = localStorage.getItem("user_data");
      return userData ? JSON.parse(userData) : null;
    } catch (err) {
      console.error("Error parsing user_data", err);
      return null;
    }
  }

  function getUserPermissions(): string[] {
    try {
      let permissions = localStorage.getItem("user_permissions");
      if (permissions) {
        return JSON.parse(permissions);
      }
      
      const userData = localStorage.getItem("user_data");
      if (userData) {
        const user = JSON.parse(userData);
        return user.permissions || [];
      }
      
      return [];
    } catch (err) {
      console.error("Error parsing user_permissions", err);
      return [];
    }
  }

  // Enhanced permission checking dengan dynamic matching
  function hasMenuAccess(sidebar: MenuItem, user: User): boolean {
    if (!user) return false;

    // If no restrictions, allow access (for general menus like Dashboard)
    if (!sidebar.meta?.permissions && !sidebar.roles) {
      return true;
    }

    // Check role if specified
    if (sidebar.roles && sidebar.roles.length > 0) {
      if (!user.role || !sidebar.roles.includes(user.role)) {
        return false;
      }
    }

    // Check permissions if specified
    if (sidebar.meta?.permissions && sidebar.meta.permissions.length > 0) {
      const userPermissions = getUserPermissions();
      
      console.log(`🔍 Checking permissions for ${sidebar.name}:`);
      console.log(`User permissions:`, userPermissions);
      console.log(`Required permissions:`, sidebar.meta.permissions);
      
      // Use smart permission matching instead of hardcoded normalization
      const hasPermission = sidebar.meta.permissions.some((requiredPerm: string) => 
        userPermissions.some((userPerm: string) => 
          hasPermissionMatch(userPerm, requiredPerm)
        )
      );
      
      console.log(`Permission result for ${sidebar.name}:`, hasPermission);
      
      if (!hasPermission) {
        return false;
      }
    }

    return true;
  }

  // Dynamic permission normalization - no hardcoded mapping
  function normalizePermission(permission: string): string {
    // Instead of hardcoded mapping, use intelligent normalization
    return permission
      .toLowerCase()
      // Convert kebab-case to snake_case for better matching
      .replace(/-/g, '_')
      // Remove extra spaces
      .trim();
  }

  // Smart permission matching with fuzzy logic
  function hasPermissionMatch(userPerm: string, requiredPerm: string): boolean {
    // Exact match first
    if (userPerm === requiredPerm) return true;
    
    // Normalize both permissions
    const normalizedUser = normalizePermission(userPerm);
    const normalizedRequired = normalizePermission(requiredPerm);
    
    // Direct normalized match
    if (normalizedUser === normalizedRequired) return true;
    
    // Extract components for flexible matching
    const userParts = normalizedUser.split('.');
    const requiredParts = normalizedRequired.split('.');
    
    // Must have same structure (module.resource.action)
    if (userParts.length !== requiredParts.length) return false;
    
    // Compare each part with fuzzy matching
    for (let i = 0; i < userParts.length; i++) {
      const userPart = userParts[i];
      const requiredPart = requiredParts[i];
      
      // Exact match
      if (userPart === requiredPart) continue;
      
      // Fuzzy match for resource names
      if (i === 1) { // Resource part
        // Check if one contains the other (for variations)
        if (userPart.includes(requiredPart) || requiredPart.includes(userPart)) {
          continue;
        }
        
        // Check common variations
        if (isResourceVariation(userPart, requiredPart)) {
          continue;
        }
      }
      
      // If no match found for this part, permission doesn't match
      return false;
    }
    
    return true;
  }

  // Check if two resource names are variations of the same thing
  function isResourceVariation(resource1: string, resource2: string): boolean {
    // Common word variations that should match
    const variations: Record<string, string[]> = {
      'wisata': ['tourism', 'tourist', 'travel'],
      'sewa': ['rental', 'rent', 'lease'],
      'warung': ['stall', 'shop', 'store'],
      'umkm': ['sme', 'business', 'enterprise'],
      'resto': ['restaurant', 'dining', 'food'],
      'internet': ['wifi', 'network', 'connection'],
      'ikan': ['fish', 'fishing'],
      'tubing': ['tube', 'floating']
    };
    
    // Check if either resource matches any variation
    for (const [base, vars] of Object.entries(variations)) {
      if ((resource1.includes(base) || vars.some(v => resource1.includes(v))) &&
          (resource2.includes(base) || vars.some(v => resource2.includes(v)))) {
        return true;
      }
    }
    
    return false;
  }

  function updateUserDisplay(): void {
    const user = getCurrentUser();
    if (!user) return;

    const userNameDisplay = document.getElementById('user-name-display');
    if (userNameDisplay) {
      userNameDisplay.textContent = user.name || 'Admin';
    }

    const userRoleDisplay = document.getElementById('user-role-display');
    const userRoleBottom = document.getElementById('user-role-bottom');
    const roleText = user.role ? user.role.charAt(0).toUpperCase() + user.role.slice(1) : 'Administrator';
    
    if (userRoleDisplay) {
      userRoleDisplay.textContent = roleText;
    }
    if (userRoleBottom) {
      userRoleBottom.textContent = roleText;
    }

    const userAvatar = document.getElementById('user-avatar');
    if (userAvatar && user.name) {
      const firstLetter = user.name.charAt(0).toUpperCase();
      const avatarSpan = userAvatar.querySelector('span');
      if (avatarSpan) {
        avatarSpan.textContent = firstLetter;
      }
    }
  }

  // Enhanced sidebar loading - fully backend driven
  async function loadSidebarData(): Promise<void> {
    const loader = document.getElementById('sidebar-loader');
    const dynamicMenu = document.getElementById('dynamic-menu');
    const errorDiv = document.getElementById('sidebar-error');

    try {
      loader?.classList.remove('hidden');
      errorDiv?.classList.add('hidden');
      dynamicMenu?.classList.add('hidden');

      const token = localStorage.getItem('access_token');
      const tokenType = (localStorage.getItem('token_type') || 'Bearer').trim();
      const userData = getCurrentUser();

      console.log('🔄 Loading sidebar data...');
      console.log('User:', userData?.name, 'Role:', userData?.role);
      console.log('Permissions:', getUserPermissions().length, 'items');

      // Fixed: Jangan langsung generate fallback jika tidak ada token
      // Coba API dulu, baru fallback jika gagal
      let shouldTryAPI = true;
      
      if (!token) {
        console.warn('⚠️ No access_token found');
        shouldTryAPI = false;
      }
      
      if (shouldTryAPI) {
        const response = await fetch('https://pengmas.hipmi-tup.com/dashboard/sidebar', {
          method: 'GET',
          headers: {
            'Authorization': `${tokenType} ${token}`,
            'Accept': 'application/json'
          },
          mode: 'cors',
          credentials: 'omit'
        });
        
        console.log(`📡 API Response: ${response.status} ${response.statusText}`);

        if (response.status === 401) {
          console.warn('🔒 Unauthorized - clearing login data');
          clearLoginData();
          shouldTryAPI = false;
        } else if (response.status === 204 || response.status === 404) {
          console.info('📭 No data from backend, using fallback menu');
          shouldTryAPI = false;
        } else if (!response.ok) {
          console.error(`HTTP ${response.status}: ${response.statusText}`);
          shouldTryAPI = false;
        } else {
          const responseText = await response.text();
          
          if (!responseText.trim()) {
            console.info('📝 Empty response, using fallback menu');
            shouldTryAPI = false;
          } else {
            try {
              const data = JSON.parse(responseText);
              console.log('📊 Backend menu data:', data);
              
              // Backend should provide complete menu with icons and permissions
              renderSidebarMenu(data);
              loader?.classList.add('hidden');
              dynamicMenu?.classList.remove('hidden');
              return; // Success, exit function
            } catch (parseError) {
              console.error('❌ JSON parse error:', parseError);
              shouldTryAPI = false;
            }
          }
        }
      }
      
      // Only generate fallback if API failed or no token
      loader?.classList.add('hidden');
      generateFallbackMenu();
      dynamicMenu?.classList.remove('hidden');
      
    } catch (err) {
      console.error('🚨 Sidebar API error:', err);
      loader?.classList.add('hidden');
      errorDiv?.classList.remove('hidden');
    }
  }

  // Fixed fallback menu generation - jangan tampilkan menu jika offline/tidak ada permissions
  function generateFallbackMenu(): void {
    const user = getCurrentUser();
    const permissions = getUserPermissions();
    const dynamicMenu = document.getElementById('dynamic-menu');
    
    if (!user || !dynamicMenu) {
      console.log('❌ No user or dynamic menu element');
      return;
    }
    
    console.log('🔄 Generating fallback menu...');
    console.log('Role:', user.role, 'Permissions:', permissions.length);
    
    let html = '';
    
    // Fixed: Hanya tampilkan menu jika ada permissions dan user authenticated
    if (permissions.length > 0 && localStorage.getItem('access_token')) {
      const menuGroups = groupPermissionsByCategory(permissions);
      
      for (const [category, items] of Object.entries(menuGroups)) {
        if (items.length === 0) continue;
        
        html += `
          <div class="pt-4">
            <div class="border-t border-gray-200 dark:border-gray-700 mb-4"></div>
          </div>
          <div class="space-y-1">
            <div class="flex items-center justify-between px-4 py-2">
              <h3 class="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                ${category.toUpperCase()}
              </h3>
              ${getSectionIndicator(category.toUpperCase())}
            </div>
        `;
        
        for (const item of items) {
          // Fixed: Gunakan default icon karena tidak ada fallback mapping lagi
          const itemIcon = 'folder';
          const isActive = currentPath === item.route || (item.route !== '/' && currentPath.startsWith(item.route));
          const activeClass = isActive ? 'bg-blue-600 text-white shadow-lg' : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700';
          
          html += `
            <div class="sidebar-item">
              <a href="${item.route}" 
                 class="flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-200 group ${activeClass}">
                <i class="fas fa-${itemIcon} w-5 h-5"></i>
                <span>${item.name}</span>
                ${item.badge ? `<span class="ml-auto text-xs bg-red-100 text-red-600 px-2 py-1 rounded-full">${item.badge}</span>` : ''}
              </a>
            </div>
          `;
        }
        
        html += '</div>';
      }
    }
    
    // Fixed: Tampilkan pesan yang sesuai berdasarkan kondisi
    if (html === '') {
      const hasToken = localStorage.getItem('access_token');
      
      if (!hasToken) {
        html = `
          <div class="p-4 text-center">
            <div class="text-gray-500 dark:text-gray-400">
              <i class="fas fa-sign-in-alt text-3xl mb-3 opacity-50"></i>
              <p class="text-sm font-medium mb-1">Silakan login</p>
              <p class="text-xs">untuk mengakses menu</p>
            </div>
          </div>
        `;
      } else {
        html = `
          <div class="p-4 text-center">
            <div class="text-gray-500 dark:text-gray-400">
              <i class="fas fa-spinner fa-spin text-3xl mb-3 opacity-50"></i>
              <p class="text-sm font-medium mb-1">Memuat menu...</p>
              <p class="text-xs">Role: <span class="font-medium">${user?.role || 'Unknown'}</span></p>
              <p class="text-xs text-gray-400 mt-1">${permissions.length} permissions loading</p>
            </div>
          </div>
        `;
      }
    }
    
    dynamicMenu.innerHTML = html;
    console.log('✅ Fallback menu generated');
  }
  
  // Group permissions menjadi menu categories dengan proper typing
  function groupPermissionsByCategory(permissions: string[]): Record<string, Array<{name: string, route: string, icon: string, badge?: string}>> {
    const groups: Record<string, Array<{name: string, route: string, icon: string, badge?: string}>> = {};
    
    permissions.forEach(permission => {
      const parts = permission.split('.');
      if (parts.length >= 2) {
        const category = parts[0];
        const resource = parts[1];
        const action = parts[2] || 'view';
        
        if (!groups[category]) {
          groups[category] = [];
        }
        
        if (action === 'viewAny' || action === 'view' || action === 'manage') {
          const menuItem = {
            name: formatMenuName(resource),
            route: `/usaha/${resource}`,
            icon: 'folder' // Default icon karena tidak ada fallback mapping
          };
          
          const exists = groups[category].some(item => item.name === menuItem.name);
          if (!exists) {
            groups[category].push(menuItem);
          }
        }
      }
    });
    
    return groups;
  }
  
  function formatMenuName(resource: string): string {
    return resource
      .split('-')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }

  function renderSidebarMenu(apiResponse: any): void {
    const dynamicMenu = document.getElementById('dynamic-menu') as HTMLElement | null;
    const user = getCurrentUser();
    
    if (!dynamicMenu || !user) {
      console.log('❌ No dynamic menu or user data');
      return;
    }

    console.log('🎨 Rendering sidebar menu...');

    let html = '';
    const sidebarData = apiResponse.data || apiResponse;
    const sortedData = (sidebarData as MenuItem[]).sort((a: MenuItem, b: MenuItem) => a.order - b.order);
    
    let visibleItemsCount = 0;
    
    for (let i = 0; i < sortedData.length; i++) {
      const sidebar = sortedData[i];
      
      if (sidebar.is_spacer) {
        let hasAccessibleItems = false;
        for (let j = i + 1; j < sortedData.length; j++) {
          if (sortedData[j].is_spacer) break;
          if (hasMenuAccess(sortedData[j], user)) {
            hasAccessibleItems = true;
            break;
          }
        }
        
        if (hasAccessibleItems) {
          html += `
            <div class="pt-4">
              <div class="border-t border-gray-200 dark:border-gray-700 mb-4"></div>
            </div>
            <div class="space-y-1">
              <div class="flex items-center justify-between px-4 py-2">
                <h3 class="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                  ${sidebar.name.toUpperCase()}
                </h3>
                ${getSectionIndicator(sidebar.name.toUpperCase())}
              </div>
          `;
        }
      } else {
        if (hasMenuAccess(sidebar, user)) {
          visibleItemsCount++;
          
          const isActive = isMenuActive(sidebar);
          const activeClass = isActive ? 'bg-blue-600 text-white shadow-lg' : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700';
          const menuRole = sidebar.meta?.route?.split('/')[4] || sidebar.name.toLowerCase().replace(/\s+/g, '-');

          // Hanya gunakan icon dari backend, tidak ada fallback
          const iconClass = sidebar.meta?.icon || 'folder';
          
          if (sidebar.is_datatable) {
            html += `
            <div id="sidebar-item-${sidebar.name.replace(/\s+/g, '-').toLowerCase()}"
                 class="sidebar-item">
              <a href="${`/usaha/${menuRole}/${sidebar.name.toLowerCase().replace(/\s+/g, '-')}`}" 
                 class="flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-200 group ${activeClass}"
                 title="${sidebar.name}">
                <i class="fas fa-${iconClass} w-5 h-5 flex-shrink-0"></i>
                <span class="truncate">${sidebar.name}</span>
                ${sidebar.badge ? `<span class="ml-auto text-xs bg-red-100 text-red-600 dark:bg-red-800 dark:text-red-200 px-2 py-1 rounded-full flex-shrink-0">${sidebar.badge}</span>` : ''}
              </a>
            </div>
          `;
          } else {
            html += `
            <div id="sidebar-item-${sidebar.name.replace(/\s+/g, '-').toLowerCase()}"
                 class="sidebar-item">
              <a href="${`/tambah-usaha/${menuRole}`}" 
                 class="flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-200 group ${activeClass}"
                 title="${sidebar.name}">
                <i class="fas fa-${iconClass} w-5 h-5 flex-shrink-0"></i>
                <span class="truncate">${sidebar.name}</span>
                ${sidebar.badge ? `<span class="ml-auto text-xs bg-red-100 text-red-600 dark:bg-red-800 dark:text-red-200 px-2 py-1 rounded-full flex-shrink-0">${sidebar.badge}</span>` : ''}
              </a>
            </div>
          `;
          }
          
          console.log(`✅ Added menu: ${sidebar.name} (${iconClass})`);
        } else {
          console.log(`⛔ Access denied: ${sidebar.name}`);
        }
      }
    }

    if (html.includes('<div class="space-y-1">')) {
      html += '</div>';
    }

    console.log(`Menu summary: ${visibleItemsCount} visible items`);

    if (visibleItemsCount === 0) {
      html = `
        <div class="p-4 text-center">
          <div class="text-gray-500 dark:text-gray-400">
            <i class="fas fa-lock text-3xl mb-3 opacity-50"></i>
            <p class="text-sm font-medium">Tidak ada menu yang dapat diakses</p>
            <p class="text-xs mt-1">Role: <span class="font-medium">${user?.role || 'Unknown'}</span></p>
            <div class="mt-2 text-xs text-gray-400">
              <p>Permissions: ${getUserPermissions().length} items</p>
            </div>
          </div>
        </div>
      `;
    }

    dynamicMenu.innerHTML = html;
    updateActiveStates();
  }

  function getSectionIndicator(sectionName: string): string {
    const indicators: { [key: string]: string } = {
      'POKDARWIS': '<i class="fas fa-users text-blue-500 animate-pulse"></i>',
      'BUMDES': '<i class="fas fa-building text-purple-500 animate-pulse"></i>',
    };
    return indicators[sectionName] || '<i class="fas fa-circle text-gray-400"></i>';
  }

  function isMenuActive(item: MenuItem): boolean {
    const menuUrl = item.meta?.route || `/usaha/${item.name.toLowerCase().replace(/\s+/g, '-')}`;
    
    if (currentPath === menuUrl) {
      return true;
    }
    
    if (menuUrl !== '/' && currentPath.startsWith(menuUrl)) {
      return true;
    }
    
    return false;
  }

  function updateActiveStates(): void {
    const sidebarItems = document.querySelectorAll('.sidebar-item a');
    
    sidebarItems.forEach((item: Element) => {
      const href = (item as HTMLAnchorElement).getAttribute('href');
      const isActive = (currentPath === href) || (href !== '/' && href !== null && currentPath.startsWith(href));
      
      if (isActive) {
        item.classList.remove('text-gray-700', 'dark:text-gray-300', 'hover:bg-gray-100', 'dark:hover:bg-gray-700');
        item.classList.add('bg-blue-600', 'text-white', 'shadow-lg');
      }
    });
  }

  function clearLoginData(): void {
    if (typeof window === 'undefined') return;

    const keysToRemove = [
      'access_token', 'token_type', 'user_data', 
      'login_time', 'user_role', 'user_permissions'
    ];
    
    keysToRemove.forEach(key => localStorage.removeItem(key));
    console.log('Login data cleared');
  }

  // Auto-refresh functionality untuk menu dinamis
  function setupAutoRefresh(): void {
    // Refresh setiap 5 menit untuk menangkap menu baru
    setInterval(async () => {
      try {
        console.log('Auto-refreshing sidebar menu...');
        await loadSidebarData();
      } catch (error) {
        console.error('Auto-refresh failed:', error);
      }
    }, 5 * 60 * 1000); // 5 menit
  }

  // Mobile sidebar toggle with scroll position preservation
  function toggleSidebar(): void {
    const sidebar = document.getElementById('sidebar');
    const overlay = document.getElementById('sidebar-overlay');
    const nav = document.getElementById('sidebar-nav');
    
    if (sidebar && overlay) {
      const isOpen = !sidebar.classList.contains('-translate-x-full');
      
      if (isOpen) {
        // Store scroll position before closing
        if (nav) {
          sidebar.setAttribute('data-scroll-pos', nav.scrollTop.toString());
        }
        
        sidebar.classList.add('-translate-x-full');
        overlay.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
      } else {
        sidebar.classList.remove('-translate-x-full');
        overlay.classList.remove('hidden');
        document.body.classList.add('overflow-hidden');
        
        // Restore scroll position after opening
        if (nav) {
          const scrollPos = parseInt(sidebar.getAttribute('data-scroll-pos') || '0');
          nav.scrollTop = scrollPos;
        }
      }
    }
  }

  // Smooth scroll to active menu item
  function scrollToActiveItem(): void {
    const activeItem = document.querySelector('.sidebar-item .bg-blue-600');
    const nav = document.getElementById('sidebar-nav');
    
    if (activeItem && nav) {
      const itemRect = activeItem.getBoundingClientRect();
      const navRect = nav.getBoundingClientRect();
      
      if (itemRect.top < navRect.top || itemRect.bottom > navRect.bottom) {
        activeItem.scrollIntoView({
          behavior: 'smooth',
          block: 'center'
        });
      }
    }
  }

  // Event listeners dan initialization
  document.addEventListener('DOMContentLoaded', () => {
    console.log('🚀 Sidebar initializing...');
    
    // Load sidebar data and update user display
    loadSidebarData();
    updateUserDisplay();
    setupAutoRefresh();

    // Mobile overlay click handler
    const sidebarOverlay = document.getElementById('sidebar-overlay');
    if (sidebarOverlay) {
      sidebarOverlay.addEventListener('click', toggleSidebar);
    }
    
    // Scroll to active item after load
    setTimeout(() => {
      scrollToActiveItem();
    }, 1000);
    
    console.log('✅ Sidebar initialized');
  });

  // Enhanced keyboard navigation with scroll support
  document.addEventListener('keydown', function(event) {
    const sidebar = document.getElementById('sidebar');
    const nav = document.getElementById('sidebar-nav');
    
    if (event.key === 'Escape') {
      if (sidebar && !sidebar.classList.contains('-translate-x-full')) {
        toggleSidebar();
        return;
      }
    }
    
    // Navigation with arrow keys when sidebar is focused
    if (sidebar && !sidebar.classList.contains('-translate-x-full')) {
      const menuItems = sidebar.querySelectorAll('.sidebar-item a');
      const activeIndex = Array.from(menuItems).findIndex(item => 
        item.classList.contains('bg-blue-600')
      );
      
      if (event.key === 'ArrowDown' && activeIndex < menuItems.length - 1) {
        event.preventDefault();
        const nextItem = menuItems[activeIndex + 1] as HTMLElement;
        nextItem.focus();
        nextItem.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }
      
      if (event.key === 'ArrowUp' && activeIndex > 0) {
        event.preventDefault();
        const prevItem = menuItems[activeIndex - 1] as HTMLElement;
        prevItem.focus();
        prevItem.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }
    }
    
    // Ctrl+Shift+R untuk manual refresh sidebar
    if (event.ctrlKey && event.shiftKey && event.key === 'R') {
      event.preventDefault();
      console.log('🔄 Manual sidebar refresh triggered');
      loadSidebarData();
    }
  });

  // Listen for storage changes (multi-tab sync)
  window.addEventListener('storage', function(event) {
    if (event.key === 'user_data' || event.key === 'user_permissions') {
      console.log('📱 User data updated in another tab, refreshing...');
      updateUserDisplay();
      loadSidebarData();
    }
  });

  // Listen for online/offline status
  window.addEventListener('online', function() {
    console.log('Back online, refreshing sidebar...');
    loadSidebarData();
  });

  window.addEventListener('offline', function() {
    console.log('Gone offline - sidebar in offline mode');
    // Show offline indicator
    const dynamicMenu = document.getElementById('dynamic-menu');
    if (dynamicMenu && !dynamicMenu.innerHTML.trim()) {
      dynamicMenu.innerHTML = `
        <div class="p-4 text-center">
          <div class="text-gray-500 dark:text-gray-400">
            <i class="fas fa-wifi-slash text-3xl mb-3 opacity-50"></i>
            <p class="text-sm font-medium mb-1">Mode Offline</p>
            <p class="text-xs">Menu akan dimuat saat online kembali</p>
          </div>
        </div>
      `;
    }
  });

  // Expose functions globally for external access
  (window as any).toggleSidebar = toggleSidebar;
  (window as any).reloadSidebar = loadSidebarData;
  (window as any).refreshSidebar = () => {
    console.log('🔄 External sidebar refresh requested');
    loadSidebarData();
  };
  (window as any).scrollToActiveItem = scrollToActiveItem;

  // Performance monitoring
  const sidebarPerformance = {
    startTime: Date.now(),
    loadTimes: [] as number[],
    
    recordLoadTime(duration: number) {
      this.loadTimes.push(duration);
      if (this.loadTimes.length > 10) {
        this.loadTimes.shift(); // Keep only last 10 measurements
      }
      
      const avg = this.loadTimes.reduce((a, b) => a + b, 0) / this.loadTimes.length;
      console.log(`⏱️ Sidebar load: ${duration}ms (avg: ${avg.toFixed(1)}ms)`);
    }
  };

  // Enhanced error handling dan retry logic
  async function loadSidebarDataWithRetry(maxRetries = 3): Promise<void> {
    const startTime = Date.now();
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        await loadSidebarData();
        const duration = Date.now() - startTime;
        sidebarPerformance.recordLoadTime(duration);
        return;
      } catch (error) {
        console.error(`❌ Sidebar load attempt ${attempt} failed:`, error);
        
        if (attempt === maxRetries) {
          console.error('🚨 All sidebar load attempts failed');
          // Show error state
          const errorDiv = document.getElementById('sidebar-error');
          const loader = document.getElementById('sidebar-loader');
          
          if (loader) loader.classList.add('hidden');
          if (errorDiv) errorDiv.classList.remove('hidden');
          
          return;
        }
        
        await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));
      }
    }
  }
  // Scroll position memory for better UX
  let scrollMemory: { [key: string]: number } = {};

  function saveScrollPosition(): void {
    const nav = document.getElementById('sidebar-nav');
    if (nav) {
      scrollMemory[currentPath] = nav.scrollTop;
    }
  }

  function restoreScrollPosition(): void {
    const nav = document.getElementById('sidebar-nav');
    if (nav && scrollMemory[currentPath] !== undefined) {
      nav.scrollTop = scrollMemory[currentPath];
    }
  }

  window.addEventListener('beforeunload', saveScrollPosition);


  window.addEventListener('load', () => {
    setTimeout(restoreScrollPosition, 500);
  });

  console.log('📋 Enhanced Scrollable Sidebar Script Loaded');
</script>